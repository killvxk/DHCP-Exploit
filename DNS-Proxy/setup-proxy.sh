#!/usr/bin/bash
# Script to resolve dependencies, compile and start dns proxy as a background process
# An initial draft of the hostcfg.conf is created with entries for ‘google’, ‘yahoo’ 
# com domain entries.

# Usage : ./setup-dnsproxy.sh 

function exit_err() 
{
    if [ $1 != 0 ]; then
	echo "Error: setup-dis failed:[$2]"
	exit $1
    fi
}

### 1. Install libcurl, iff not already installed
apt list --installed | grep "libcurl4-openssl"
if [ $? != 0 ]; then
	apt-get install libcurl4-openssl-dev
fi
clear # let me clean it up!

### 2. Compile dns proxy
make 2>&1 > /dev/null
exit_err $? "Compilation failed"


### 3. Add all the domain names to be spoofed in hostcfg.conf file as:
#    	<domain name1> <IP1>
#    	<domain name1> <IP1>
localip=`ifconfig | grep netmask | grep -v "127.0" | awk -F " " '{print $2}'`
echo "google.com $localip" > ${PWD}/hostcfg.conf 
echo "yahoo.com $localip" >> ${PWD}/hostcfg.conf 

### 4. Launch DNS Proxy:
# kill existing copy, iff any
old_proxy=`ps -eaf | grep dnsp | grep -v grep | awk -F " " '{print $2}'`
if [ "$old_proxy" != "" ]; then 
	kill -9 $old_proxy
fi

# launch dns proxy in background
${PWD}/dnsp -l 127.0.0.1 -c ${PWD}/hostcfg.conf & 
exit_err $? "DNS proxy launch failed"

### 5. Done compile and start, test as below: 
dproxy_pid=`ps -eaf | grep dnsp | grep -v grep | awk -F " " '{print $2}'`
echo "Done compile, install and launch of DNS proxy [ bgPID $dproxy_pid ]"
echo "You may test as:  dig <domain_name> @127.0.0.1 "
